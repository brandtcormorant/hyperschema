const gen = require('generate-object-property')

module.exports = function generateSchema (hyperschema, version) {
  const types = hyperschema.orderedTypes.filter(({ type }) => !type.primitive)
  const encoderMap = new Map()
  for (let i = 0; i < types.length; i++) {
    const { type, name } = types[i]
    type.preprocessEncoding()
    encoderMap.set(name, 'encoding' + i)
  }

  let str = ''
  str += '// This file is autogenerated by the hyperschema compiler\n'
  str += `// Schema Version: ${version}\n`
  str += `const VERSION = ${version}\n`
  str += 'const c = require(\'compact-encoding\')\n'

  for (let i = 0; i < types.length; i++) {
    const { name, type } = types[i]
    str += generateEncoder(encoderMap, encoderMap.get(name), name, type)
    str += '\n'
  }

  str += 'const EncoderMap = new Map([\n'

  for (let i = 0; i < types.length; i++) {
    const { name } = types[i]
    str += `  ['${name}', ${encoderMap.get(name)}]`
    if (i !== types.length - 1) str += ',\n'
    else str += '\n'
  }
  str += '])\n\n'

  str += 'module.exports = function resolve (name) {\n'
  str += '  const enc = EncoderMap.get(name)\n'
  str += '  if (!enc) throw new Error(\'Encoder not found\' + name)\n'
  str += '  return enc\n'
  str += '}\n'

  return str
}

function generateEncoder (encoderMap, id, name, type) {
  let str = ''
  const fieldTypes = new Map()

  for (let i = 0; i < type._encodables.length; i++) {
    const enc = type._encodables[i]
    if (!enc.framed && !enc.array) continue

    let typeStr = enc.type.primitive ? enc.type.name : encoderMap.get(enc.fqn)
    if (enc.array) typeStr = `c.array(${typeStr})`
    if (enc.framed) typeStr = `c.frame(${typeStr})`
    const fieldId = `${id}_${i}`
    fieldTypes.set(enc.name, fieldId)

    str += `// ${name}.${enc.name}\n`
    str += `const ${fieldId} = ${typeStr}\n`
  }
  str += '\n'

  const preencode = generateEncode(type, { preencode: true })
  const encode = generateEncode(type)
  const decode = generateDecode(type)
  str += `// ${name}\n`
  str += `const ${id} = {\n`
  str += '  preencode (state, m) {\n'
  str += `    ${preencode}\n`
  str += '  },\n'
  str += '  encode (state, m) {\n'
  str += `    ${encode}\n`
  str += '  },\n'
  str += '  decode (state) {\n'
  str += `    ${decode}\n`
  str += '  }\n'
  str += '}\n'
  return str

  function generateEncode (type, { preencode = false } = {}) {
    const fn = preencode ? 'preencode' : 'encode'
    let str = ''

    str += 'let flags = 0\n'
    for (const optional of type._optionals) {
      str += `    if (m.${optional.name}) flags |= ${optional.flag}`
      str += '\n'
    }
    str += '\n'

    let bitfield = false
    let optional = false
    for (let i = 0; i < type._encodables.length; i++) {
      const enc = type._encodables[i]

      if (i === type._bitfieldPosition) {
        str += `    c.uint.${fn}(state, flags)`
        bitfield = true
      }

      if (!enc.type.bool) {
        if (bitfield === true) {
          str += '\n'
          bitfield = false
        }
        if (enc.optional && !optional) {
          str += '\n'
          optional = true
        }
        const prefix = enc.optional ? `    if (m.${enc.name})` : '   '
        str += `${prefix} ${getEncoder(enc)}.${fn}(state, m.${enc.name}) `
        if (i !== type._encodables.length - 1) str += '\n'
      }
    }
    return str
  }

  function generateDecode (type) {
    let str = ''

    str += 'const res = {\n'
    for (let i = 0; i < type._encodables.length; i++) {
      const enc = type._encodables[i]
      str += `      ${enc.name}: ${enc.default}`
      if (i !== type._encodables.length - 1) str += ','
      str += '\n'
    }
    str += '    }\n'

    for (let i = 0; i < type._encodables.length; i++) {
      const enc = type._encodables[i]
      const decodeStr = `res.${enc.name} = ${getEncoder(enc)}.decode(state)`

      if (i === type._bitfieldPosition) {
        str += '\n'
        str += '    const flags = state.start < state.end ? c.uint.decode(state) : 0\n'
      }

      if (!enc.optional) {
        str += `    ${decodeStr}\n`
      } else {
        str += `    if ((flags & enc.flag) !== 0) ${decodeStr}\n`
      }
    }

    str += '\n'
    str += '    return res'
    return str
  }

  function getEncoder (enc) {
    if (enc.type.primitive) return `c.${enc.type.name}`
    if (fieldTypes.has(enc.name)) return fieldTypes.get(enc.name)
    return encoderMap.get(enc.fqn)
  }
}
